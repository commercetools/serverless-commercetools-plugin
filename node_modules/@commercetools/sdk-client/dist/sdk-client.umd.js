(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('querystring')) :
  typeof define === 'function' && define.amd ? define(['exports', 'querystring'], factory) :
  (global = global || self, factory(global.CommercetoolsSdkClient = {}, global.qs));
}(this, (function (exports, qs) { 'use strict';

  qs = qs && Object.prototype.hasOwnProperty.call(qs, 'default') ? qs['default'] : qs;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var METHODS = ['ACL', 'BIND', 'CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LINK', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCALENDAR', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REBIND', 'REPORT', 'SEARCH', 'SOURCE', 'SUBSCRIBE', 'TRACE', 'UNBIND', 'UNLINK', 'UNLOCK', 'UNSUBSCRIBE'];

  function validate(funcName, request) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      allowedMethods: METHODS
    };
    if (!request) // eslint-disable-next-line max-len
      throw new Error("The \"".concat(funcName, "\" function requires a \"Request\" object as an argument. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest"));
    if (typeof request.uri !== 'string') // eslint-disable-next-line max-len
      throw new Error("The \"".concat(funcName, "\" Request object requires a valid uri. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest"));
    if (!options.allowedMethods.includes(request.method)) // eslint-disable-next-line max-len
      throw new Error("The \"".concat(funcName, "\" Request object requires a valid method. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest"));
  }

  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    // eslint-disable-next-line no-param-reassign
    funcs = funcs.filter(function (func) {
      return typeof func === 'function';
    });
    if (funcs.length === 1) return funcs[0];
    return funcs.reduce(function (a, b) {
      return function () {
        return a(b.apply(void 0, arguments));
      };
    });
  }

  function createClient(options) {
    if (!options) throw new Error('Missing required options');
    if (options.middlewares && !Array.isArray(options.middlewares)) throw new Error('Middlewares should be an array');
    if (!options.middlewares || !Array.isArray(options.middlewares) || !options.middlewares.length) throw new Error('You need to provide at least one middleware');
    return {
      /*
        Given a request object,
      */
      execute: function execute(request) {
        validate('exec', request);
        return new Promise(function (resolve, reject) {
          var resolver = function resolver(rq, rs) {
            // Note: pick the promise `resolve` and `reject` function from
            // the response object. This is not necessary the same function
            // given from the `new Promise` constructor, as middlewares could
            // override those functions for custom behaviours.
            if (rs.error) rs.reject(rs.error);else {
              var resObj = {
                body: rs.body || {},
                statusCode: rs.statusCode
              };
              if (rs.headers) resObj.headers = rs.headers;
              if (rs.request) resObj.request = rs.request;
              rs.resolve(resObj);
            }
          };

          var dispatch = compose.apply(void 0, _toConsumableArray(options.middlewares))(resolver);
          dispatch(request, // Initial response shape
          {
            resolve: resolve,
            reject: reject,
            body: undefined,
            error: undefined
          });
        });
      },
      process: function process(request, fn, processOpt) {
        var _this = this;

        validate('process', request, {
          allowedMethods: ['GET']
        });
        if (typeof fn !== 'function') // eslint-disable-next-line max-len
          throw new Error('The "process" function accepts a "Function" as a second argument that returns a Promise. See https://commercetools.github.io/nodejs/sdk/api/sdkClient.html#processrequest-processfn-options'); // Set default process options

        var opt = _objectSpread2({
          total: Number.POSITIVE_INFINITY,
          accumulate: true
        }, processOpt);

        return new Promise(function (resolve, reject) {
          var _request$uri$split = request.uri.split('?'),
              _request$uri$split2 = _slicedToArray(_request$uri$split, 2),
              path = _request$uri$split2[0],
              queryString = _request$uri$split2[1];

          var requestQuery = _objectSpread2({}, qs.parse(queryString));

          var query = _objectSpread2({
            // defaults
            limit: 20
          }, requestQuery);

          var hasFirstPageBeenProcessed = false;
          var itemsToGet = opt.total;

          var processPage = function processPage(lastId) {
            var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            // Use the lesser value between limit and itemsToGet in query
            var limit = query.limit < itemsToGet ? query.limit : itemsToGet;
            var originalQueryString = qs.stringify(_objectSpread2({}, query, {
              limit: limit
            }));

            var enhancedQuery = _objectSpread2({
              sort: 'id asc',
              withTotal: false
            }, lastId ? {
              where: "id > \"".concat(lastId, "\"")
            } : {});

            var enhancedQueryString = qs.stringify(enhancedQuery);

            var enhancedRequest = _objectSpread2({}, request, {
              uri: "".concat(path, "?").concat(enhancedQueryString, "&").concat(originalQueryString)
            });

            _this.execute(enhancedRequest).then(function (payload) {
              var _payload$body = payload.body,
                  results = _payload$body.results,
                  resultsLength = _payload$body.count;

              if (!resultsLength && hasFirstPageBeenProcessed) {
                resolve(acc || []);
                return;
              }

              Promise.resolve(fn(payload)).then(function (result) {
                hasFirstPageBeenProcessed = true;
                var accumulated;
                if (opt.accumulate) accumulated = acc.concat(result || []);
                itemsToGet -= resultsLength; // If there are no more items to get, it means the total number
                // of items in the original request have been fetched so we
                // resolve the promise.
                // Also, if we get less results in a page then the limit set it
                // means that there are no more pages and that we can finally
                // resolve the promise.

                if (resultsLength < query.limit || !itemsToGet) {
                  resolve(accumulated || []);
                  return;
                }

                var last = results[resultsLength - 1];
                var newLastId = last && last.id;
                processPage(newLastId, accumulated);
              }).catch(reject);
            }).catch(reject);
          }; // Start iterating through pages


          processPage();
        });
      }
    };
  }

  exports.createClient = createClient;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
