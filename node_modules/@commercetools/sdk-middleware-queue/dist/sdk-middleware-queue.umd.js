(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.CommercetoolsSdkMiddlewareQueue = {}));
}(this, (function (exports) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function createQueueMiddleware() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$concurrency = _ref.concurrency,
        concurrency = _ref$concurrency === void 0 ? 20 : _ref$concurrency;

    var queue = [];
    var runningCount = 0;

    var dequeue = function dequeue(next) {
      // We assume here that this task has been completed
      runningCount -= 1; // Check if there are any other pending tasks and execute them

      if (queue.length && runningCount <= concurrency) {
        var nextTask = queue.shift();
        runningCount += 1;
        next(nextTask.request, nextTask.response);
      }
    };

    return function (next) {
      return function (request, response) {
        // Override response `resolve` and `reject` to know when the request has
        // been completed and therefore trigger a pending task in the queue.
        var patchedResponse = _objectSpread2({}, response, {
          resolve: function resolve(data) {
            // Resolve original promise
            response.resolve(data);
            dequeue(next);
          },
          reject: function reject(error) {
            // Reject original promise
            response.reject(error);
            dequeue(next);
          }
        }); // Add task to the queue


        queue.push({
          request: request,
          response: patchedResponse
        }); // If possible, run the task straight away

        if (runningCount < concurrency) {
          var nextTask = queue.shift();
          runningCount += 1;
          next(nextTask.request, nextTask.response);
        }
      };
    };
  }

  exports.createQueueMiddleware = createQueueMiddleware;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
